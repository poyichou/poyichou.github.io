set nu
set bg=dark
filetype indent on
" 檔案編碼
set encoding=utf-8
set fileencodings=utf-8,cp950,utf-16le
syntax on        " 語法上色顯示
set nocompatible " VIM 不使用和 VI 相容的模式

if &filetype ==# 'python'
    set shiftwidth=4 " 設定 existing 縮排寬度
    set tabstop=4    " inserting tab 的字元數
    set softtabstop=4 "方便在開啟了et後使用退格（backspace）鍵，每次退格將刪除X個空格
    set expandtab   " 用 space 代替 tab
else
    set shiftwidth=8
    set tabstop=8
    set softtabstop=8
    set noexpandtab
endif

set smarttab	 " 在行首按TAB將加入sw個空格，否則加入ts個空格
"set autoindent

set ruler        " 顯示右下角設定值
set backspace=2  " 在 insert 也可用 backspace
set ic           " 設定搜尋忽略大小寫
set ru           " 第幾行第幾個字
set hlsearch     " 設定高亮度顯示搜尋結果
set incsearch    " 在關鍵字還沒完全輸入完畢前就顯示結果
set smartindent  " 設定 smartindent, include autoindent
set confirm      " 操作過程有衝突時，以明確的文字來詢問
set history=100  " 保留 100 個使用過的指令

colorscheme default
set cursorline   " 顯示目前的游標位置
"hi CursorLine cterm=none ctermbg=DarkGrey ctermfg=White "set color of highlight

set laststatus=2
set statusline=%4*%<\%m%<[%f\%r%h%w]\ [%{&ff},%{&fileencoding},%Y]%=\[Position=%l,%v,%p%%]
set noswapfile
"set paste "no Indentation while pasting (Ctrl-V)
"for search
set ignorecase
set smartcase

" grep cword recursively
nmap gr GR<CR>:copen<CR>
nnoremap GR :tab vs<CR>:vimgrep '<C-R>=expand("<cword>")<CR>' **/*.c **/*.h **/*.cpp
" grep selected words recursively
vmap gr GR<CR>:copen<CR>
vnoremap GR y:tab vs<CR>:vimgrep '<C-R>"' **/*.c **/*.h **/*.cpp

" Update cscope database if you don't want rerun vim
"nnoremap CS :!cscope -Rbqk<CR>:cs reset<CR><CR>

" comment out a line of python script when press py
nnoremap py I# <ESC>
" comment out a line of c code when press gcc
nnoremap gcc I/* <ESC>A */<ESC>

" toggle nu
nmap nu :set nu!<CR>

" keys for easy navigation between splits 
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nmap <A-Down> <C-J>
nmap <A-Up> <C-K>
nmap <A-Right> <C-L>
nmap <A-Left> <C-H>

" set mouse mode to do such as resize split with mouse
" make vim more like gui
nmap mou :set mouse=a<CR>

" To use jedi
"   In ubuntu,
"     apt install vim-python-jedi
"     vim-addons install python-jedi
"   Or simply,
"     git clone --recursive https://github.com/davidhalter/jedi-vim.git ~/.vim/pack/vendor/start/jedi-vim
" No pop up completion after typing a dot
let g:jedi#popup_on_dot = 0

" COPY VISUAL BLOCK TO CLIPBOARD
"   to check if supported :echo has('clipboard')
"   if not, install vim-gtk3
" usage: (cut | copy | paste)
"   "[+|*][x|y|p]
if has('clipboard') " copy/cut to system clipboard
    noremap YY "+y
    noremap XX "+x
endif

" search visually selected text
"  to use, visually select, press '//'
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

"disable bell/visual bell altogether
set vb              " enable vim's internal visual bell
set t_vb=           " set the effect of the vim visual bell to do nothing

set clipboard=      " `:set clipboard` to check current value, if unnamed, vim will use system clipboard as copy/change buffer

" To generate cscope.out at first, cscope -Rbqk
function! Find_cscope_out_upward()
    "let current_dir = getcwd()
    let full_file_path = expand("%:p:h")
    let file_dir = fnamemodify(full_file_path, ":h")
    let s:cscope_out = findfile("cscope.out", file_dir . ";") " find cscope.out upward, static variable
    return s:cscope_out
endfunction

function! Update_cscope_out()
    let cscope_out = Find_cscope_out_upward() " find cscope.out upward
    if !empty(cscope_out) && filereadable(cscope_out)
        let src_root = fnamemodify(cscope_out, ":h")
        execute 'cd' fnameescape(src_root)
        let result = system("cscope -Rbqk")
        cd - " cd back to last directory
    endif
endfunction

" find cscope.out upward
function! Add_cscope_out()
    let cscope_out = Find_cscope_out_upward()
    if !empty(cscope_out) && filereadable(cscope_out)
	" kill current connection, used for :so ~/.vimrc
        silent exe "cs kill -1"
        silent exe "cs add" cscope_out
        set csre " make cscope aware of path of cscope.out instead of just search through relative path
    endif
    set cscopeverbose
endfunction

if 1 " cscope_support
    " cscope color
    hi ModeMsg ctermfg=brown ctermbg=none
    " find
    nmap zs ZS<CR>
    nmap zg ZG<CR>
    nmap zc ZC<CR>
    nmap zt ZT<CR>
    nmap ze ZE<CR>
    nmap zf ZF<CR>
    nmap zi ZI<CR>
    nmap zd ZD<CR>

    nmap ZS :cs find s <C-R>=expand("<cword>")<CR>
    nmap ZG :cs find g <C-R>=expand("<cword>")<CR>
    nmap ZC :cs find c <C-R>=expand("<cword>")<CR>
    nmap ZT :cs find t <C-R>=expand("<cword>")<CR>
    nmap ZE :cs find e <C-R>=expand("<cword>")<CR>
    nmap ZF :cs find f <C-R>=expand("<cfile>")<CR>
    nmap ZI :cs find i ^<C-R>=expand("<cfile>")<CR>$
    nmap ZD :cs find d <C-R>=expand("<cword>")<CR>
    let ret = Add_cscope_out()
    nnoremap CS :cs kill -1<CR>:call Update_cscope_out()<CR>:call Add_cscope_out()<CR>:echohl WarningMsg \| echo "cscope update done" \| echohl None<CR>
endif

if 1 " taglist_support
    " to install taglist,
    "   1.install ctags
    "   2.download taglist zip file
    "     copy plugin/taglist.vim to ~/.vim/plugin
    "     copy doc/taglist.txt to ~/.vim/doc
    nmap <F8> :TlistToggle<CR><CR>
    let Tlist_Show_One_File=1
    let Tlist_Exit_OnlyWindow=1
    set ut=100
endif

if 1 " NERDTree_support
    " NERDTree
    " To install for vim ver 8+
    " git clone https://github.com/preservim/nerdtree.git ~/.vim/pack/vendor/start/nerdtree
    " vim -u NONE -c "helptags ~/.vim/pack/vendor/start/nerdtree/doc" -c q
    nmap <F9> :NERDTreeToggle<CR>
endif

if 1 " linediff_support
    " to install linediff,
    "   download linediff.zip
    "   unzip then into ~/.vim
    vnoremap  LD :'<,'>Linediff<CR>
    " comapre whole file
    nmap <expr> LLD "gg" . "V" . "G " . "LD"
endif

if 1 " fold_support
    " Use F10 to toggle folding
    if &filetype ==# 'python'
        set foldmethod=indent
    else
        set foldmethod=syntax
    endif
    set nofoldenable " prevent closing all fold
    set foldlevel=10 " higher than 0 to avoid za/zc closing all fold
    "toggle fold
    inoremap <F10> <C-O>za
    nnoremap <F10> za
    onoremap <F10> <C-C>za
    vnoremap <F10> zf
endif

" tabline setting
function! Tabline() abort
    let l:line = ''
    let l:current = tabpagenr()

    for l:i in range(1, tabpagenr('$'))
        " set to current or not
        if l:i == l:current
            let l:line .= '%#TabLineSel#'
        else
            let l:line .= '%#TabLine#'
        endif
        " get split number
        let l:line .= tabpagewinnr(l:i, '$')

        let l:label = fnamemodify(
            \ bufname(tabpagebuflist(l:i)[tabpagewinnr(l:i) - 1]),
            \ ':t'
        \ )

        let l:line .= '%' . i . 'T' " Starts mouse click target region.
        let l:line .= '  ' . l:label . '  '
    endfor

    let l:line .= '%#TabLineFill#'
    let l:line .= '%T' " Ends mouse click target region(s).

    return l:line
endfunction

" set tabline color
hi TabLine ctermfg=none ctermbg=none
hi TabLineFill ctermfg=none ctermbg=none
hi TabLineSel ctermfg=Black ctermbg=DarkGreen
" set tabline tab name be only filename instead of full path
set tabline=%!Tabline()

" List all the included files.
nnoremap <F4> :checkpath!<CR>

" To reload a file with different encoding:
"   :e ++enc=utf-8
let g:enc_index = 0
function! ChangeFileencoding()
  let encodings = ['utf-8', 'cp950', 'utf-16le']
  execute 'e ++enc='.encodings[g:enc_index].' %:p'
  if g:enc_index >=2
	  let g:enc_index = 0
  else
	  let g:enc_index = g:enc_index + 1
  endif
endf
nmap <F5> :call ChangeFileencoding()<CR>
