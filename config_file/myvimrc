set nu
set bg=dark
filetype indent on
" 檔案編碼
set encoding=utf-8
set fileencodings=utf-8,cp950
syntax on        " 語法上色顯示
set nocompatible " VIM 不使用和 VI 相容的模式

set shiftwidth=4 " 設定 existing 縮排寬度 
set tabstop=4    " inserting tab 的字元數
set softtabstop=4 "方便在開啟了et後使用退格（backspace）鍵，每次退格將刪除X個空格

set smarttab	 " 在行首按TAB將加入sw個空格，否則加入ts個空格
"set autoindent
set expandtab   " 用 space 代替 tab

set ruler        " 顯示右下角設定值
set backspace=2  " 在 insert 也可用 backspace
set ic           " 設定搜尋忽略大小寫
set ru           " 第幾行第幾個字
set hlsearch     " 設定高亮度顯示搜尋結果
set incsearch    " 在關鍵字還沒完全輸入完畢前就顯示結果
set smartindent  " 設定 smartindent, include autoindent
set confirm      " 操作過程有衝突時，以明確的文字來詢問
set history=100  " 保留 100 個使用過的指令

colorscheme default
set cursorline   " 顯示目前的游標位置
"hi CursorLine cterm=none ctermbg=DarkGrey ctermfg=White "set color of highlight

set laststatus=2
set statusline=%4*%<\%m%<[%f\%r%h%w]\ [%{&ff},%{&fileencoding},%Y]%=\[Position=%l,%v,%p%%]
set noswapfile
"set paste "no Indentation while pasting (Ctrl-V)
"for search
set ignorecase
set smartcase

" find directly
nmap zs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap zg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap zc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap zt :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap ze :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap zf :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap zi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap zd :cs find d <C-R>=expand("<cword>")<CR><CR>

" find after pressing enter, used for words that need modification
nmap as :cs find s <C-R>=expand("<cword>")<CR>
nmap ag :cs find g <C-R>=expand("<cword>")<CR>
nmap ac :cs find c <C-R>=expand("<cword>")<CR>
nmap at :cs find t <C-R>=expand("<cword>")<CR>
nmap ae :cs find e <C-R>=expand("<cword>")<CR>
nmap af :cs find f <C-R>=expand("<cfile>")<CR>
nmap ai :cs find i ^<C-R>=expand("<cfile>")<CR>$
nmap ad :cs find d <C-R>=expand("<cword>")<CR>

" Update cscope database if you don't want rerun vim
"nnoremap CS :!cscope -Rbqk<CR>:cs reset<CR><CR>

" comment out a line of python script when press py
nnoremap py I# <ESC>
" comment out a line of c code when press gcc
nnoremap gcc I/* <ESC>A */<ESC>

" toggle nu
nmap nu :set nu!<CR>
" NERDTree
" To install for vim ver 8+
" git clone https://github.com/preservim/nerdtree.git ~/.vim/pack/vendor/start/nerdtree
" vim -u NONE -c "helptags ~/.vim/pack/vendor/start/nerdtree/doc" -c q
nmap ner :NERDTree<CR>

" keys for easy navigation between splits 
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" set mouse mode to do such as resize split with mouse
" make vim more like gui
nmap mou :set mouse=a<CR>

" To use jedi
"   In ubuntu,
"     apt install vim-python-jedi
"     vim-addons install python-jedi
" No pop up completion after typing a dot
let g:jedi#popup_on_dot = 0

" COPY VISUAL BLOCK TO CLIPBOARD
"   to check if supported :echo has('clipboard')
"   if not, install vim-gtk3
" usage: (cut | copy | paste)
"   "[+|*][x|y|p]
if has('clipboard') " copy/cut to system clipboard
    noremap YY "+y<CR>
    noremap XX "+x<CR>
endif

" search visually selected text
"  to use, visually select, press '//'
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

"disable bell/visual bell altogether
set vb              " enable vim's internal visual bell
set t_vb=           " set the effect of the vim visual bell to do nothing

set clipboard=      " `:set clipboard` to check current value, if unnamed, vim will use system clipboard as copy/change buffer

" To generate cscope.out at first, cscope -Rbqk
function! Find_cscope_out_upward()
    "let current_dir = getcwd()
    let full_file_path = expand("%:p:h")
    let file_dir = fnamemodify(full_file_path, ":h")
    let cscope_out = findfile("cscope.out", file_dir . ";") " find cscope.out upward
    return cscope_out
endfunction

function! Update_cscope_out()
    let cscope_out = Find_cscope_out_upward() " find cscope.out upward
    if !empty(cscope_out) && filereadable(cscope_out)
        let src_root = fnamemodify(cscope_out, ":h")
        let result = system("cd ". src_root . " ;cscope -Rbqk")
    endif
endfunction

" find cscope.out upward
function! Add_cscope_out()
    let cscope_out = Find_cscope_out_upward()
    if !empty(cscope_out) && filereadable(cscope_out)
        silent exe "cs add" cscope_out
        set csre " make cscope aware of path of cscope.out instead of just search through relative path
    endif
    set cscopeverbose
endfunction

let ret = Add_cscope_out()

nnoremap CS :cs kill -1<CR>:call Update_cscope_out()<CR>:call Add_cscope_out()<CR><CR>
