" ============= Plugin Supports, comment or unset to disable =============
let g:cscope_support = 1
let g:taglist_support = 1
let g:NERDTree_support = 1
let g:linediff_support = 1
let g:fold_support = 1
let g:ctrlp_support = 1
let g:jedi_support = 1
let g:srcexpl_support = 1
" append log to quickfix
let g:verbose_level = 0
" ============================= Plugins End ==============================

set nu
set bg=dark
filetype indent on
" 檔案編碼
set encoding=utf-8
set fileencodings=utf-8,cp950,utf-16le
syntax on        " 語法上色顯示
set nocompatible " VIM 不使用和 VI 相容的模式

filetype detect
if &filetype ==# 'python' || &filetype ==# 'vim'
    set shiftwidth=4 " 設定 existing 縮排寬度
    set tabstop=4    " inserting tab 的字元數
    set softtabstop=4 "方便在開啟了et後使用退格（backspace）鍵，每次退格將刪除X個空格
    set expandtab   " 用 space 代替 tab
else
    set shiftwidth=8
    set tabstop=8
    set softtabstop=8
    set noexpandtab
endif

set smarttab	 " 在行首按TAB將加入sw個空格，否則加入ts個空格
"set autoindent

set ruler        " 顯示右下角設定值
set backspace=2  " 在 insert 也可用 backspace
set ic           " 設定搜尋忽略大小寫
set ru           " 第幾行第幾個字
set hlsearch     " 設定高亮度顯示搜尋結果
set incsearch    " 在關鍵字還沒完全輸入完畢前就顯示結果
set smartindent  " 設定 smartindent, include autoindent
set confirm      " 操作過程有衝突時，以明確的文字來詢問
set history=100  " 保留 100 個使用過的指令

try
    colorscheme codedark
catch /^Vim\%((\a\+)\)\=:E185/ " Cannot find
    colorscheme default
catch " other error, e.g. vim too old to compatible
    colorscheme default
endtry

set cursorline   " 顯示目前的游標位置
"hi CursorLine cterm=none ctermbg=DarkGrey ctermfg=White "set color of highlight

set laststatus=2
set statusline=%4*%<\%m%<[%f\%r%h%w]\ [%{&ff},%{&fileencoding},%Y]%=\[Position=%l,%v,%p%%]
set noswapfile
"set paste "no Indentation while pasting (Ctrl-V)
"for search
set ignorecase
set smartcase
"disable bell/visual bell altogether
set vb              " enable vim's internal visual bell
set t_vb=           " set the effect of the vim visual bell to do nothing

set clipboard=      " `:set clipboard` to check current value, if unnamed, vim will use system clipboard as copy/change buffer

" make vim cycling through tab auto-completion
set wildmode=longest,list,full
set wildmenu

" ================== General Map ==================

" grep cword recursively
nmap gr GR<CR>:copen<CR>
nnoremap GR :tab vs<CR>:vimgrep '<C-R>=expand("<cword>")<CR>' **/*.c **/*.h **/*.cpp
" grep selected words recursively
vmap gr GR<CR>:copen<CR>
vnoremap GR y:tab vs<CR>:vimgrep '<C-R>"' **/*.c **/*.h **/*.cpp

" Update cscope database if you don't want rerun vim
"nnoremap CS :!cscope -Rbqk<CR>:cs reset<CR><CR>

" comment out a line of python script when press py
nnoremap py I# <ESC>
" comment out a line of c code when press gcc
nnoremap gcc I/* <ESC>A */<ESC>

" toggle nu
nmap nu :set nu!<CR>

" keys for easy navigation between splits 
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nmap <A-Down> <C-J>
nmap <A-Up> <C-K>
nmap <A-Right> <C-L>
nmap <A-Left> <C-H>

" set mouse mode to do such as resize split with mouse
" make vim more like gui
nmap mou :set mouse=a<CR>

nmap ta :tab vs<CR>

" COPY VISUAL BLOCK TO CLIPBOARD
"   to check if supported :echo has('clipboard')
"   if not, install vim-gtk3
" usage: (cut | copy | paste)
"   "[+|*][x|y|p]
if has('clipboard') " copy/cut to system clipboard
    noremap YY "+y
    noremap XX "+x
endif

" search visually selected text
"  to use, visually select, press '//'
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

" List all the included files.
nnoremap <F4> :checkpath!<CR>

nmap <F5> :call ChangeFileencoding()<CR>

nmap <F3> :call ToggleHorizenVertical()<CR>
" change vertical split to horizental
"   ctrl-w t ctrl-w H
" change vertical split to horizental
"   ctrl-w t ctrl-w K
let g:split_idx = 0
function! ToggleHorizenVertical()
  if g:split_idx >=1
      call feedkeys("\<C-W>t\<C-W>H")
      "normal <Ctrl-W>t<Ctrl-W>H
      echo g:split_idx
      let g:split_idx = 0
  else
      call feedkeys("\<C-W>t\<C-W>K")
      "normal <Ctrl-W>t<Ctrl-W>K
      echo g:split_idx
      let g:split_idx = g:split_idx + 1
  endif
endf

" ================ General Map End ================

" ======================= Plugin Config =======================

if exists('g:jedi_support') && g:jedi_support
    " To use jedi
    "   In ubuntu,
    "     apt install vim-python-jedi
    "     vim-addons install python-jedi
    "   Or simply,
    "     git clone --recursive https://github.com/davidhalter/jedi-vim.git ~/.vim/pack/vendor/start/jedi-vim
    " No pop up completion after typing a dot
    let g:jedi#popup_on_dot = 1
endif

if exists('g:cscope_support') && g:cscope_support " cscope_support
    " cscope color
    hi ModeMsg ctermfg=brown ctermbg=none
    " find
    nmap zs ZS<CR>
    nmap zg ZG<CR>
    nmap zc ZC<CR>
    nmap zt ZT<CR>
    nmap ze ZE<CR>
    nmap zf ZF<CR>
    nmap zi ZI<CR>
    nmap zd ZD<CR>

    nmap ZS ZZS <C-R>=expand("<cword>")<CR>
    nmap ZG ZZG <C-R>=expand("<cword>")<CR>
    nmap ZC ZZC <C-R>=expand("<cword>")<CR>
    nmap ZT ZZT <C-R>=expand("<cword>")<CR>
    nmap ZE ZZE <C-R>=expand("<cword>")<CR>
    nmap ZF ZZF <C-R>=expand("<cfile>")<CR>
    nmap ZI ZZI ^<C-R>=expand("<cfile>")<CR>$
    nmap ZD ZZD <C-R>=expand("<cword>")<CR>

    nnoremap ZZS :cs find s
    nnoremap ZZG :cs find g
    nnoremap ZZC :cs find c
    nnoremap ZZT :cs find t
    nnoremap ZZE :cs find e
    nnoremap ZZF :cs find f
    nnoremap ZZI :cs find i
    nnoremap ZZD :cs find d
    " move to new split
    if !exists('#UpdateCscopeWhenEnter#BufEnter')
        augroup UpdateCscopeWhenEnter
            autocmd!
            autocmd BufEnter * call Add_cscope_out()
        augroup END
    endif
    "call Add_cscope_out()
    nnoremap CS :cs kill -1<CR>:call Update_cscope_out("update")<CR>
    nnoremap CCS :cs kill -1<CR>:call Update_cscope_out("regenerate")<CR>
endif

" p.s. command 'clone_vim_plugin' is in https://poyichou.github.io/config_file/mybashrc

if exists('g:taglist_support') && g:taglist_support " taglist_support
    " to install taglist,
    "   method 1:
    "     1.install ctags
    "     2.download taglist zip file
    "       copy plugin/taglist.vim to ~/.vim/plugin
    "       copy doc/taglist.txt to ~/.vim/doc
    "   method 2:
    "     clone_vim_plugin https://github.com/vim-scripts/taglist.vim.git
    nmap <F8> :TlistToggle<CR><CR>
    let Tlist_Show_One_File=1
    let Tlist_Exit_OnlyWindow=1
    set ut=100
endif

if exists('g:NERDTree_support') && g:NERDTree_support " NERDTree_support
    " NERDTree
    " To install for vim ver 8+
    "   git clone https://github.com/preservim/nerdtree.git ~/.vim/pack/vendor/start/nerdtree
    "   vim -u NONE -c "helptags ~/.vim/pack/vendor/start/nerdtree/doc" -c q
    " else
    "   clone_vim_plugin git://github.com/AndrewRadev/nerdtree.git
    nmap <F9> :NERDTreeToggle<CR>
endif

if exists('g:linediff_support') && g:linediff_support " linediff_support
    " to install linediff,
    "   method 1:
    "     download linediff.zip
    "     unzip then into ~/.vim
    "   method 2:
    "     clone_vim_plugin git://github.com/AndrewRadev/linediff.vim.git

    ":'<,'>Linediff<CR>
    vnoremap  LD :Linediff<CR>
    " comapre whole file
    nmap <expr> LLD "gg" . "V" . "G " . "LD"
endif

if exists('g:fold_support') && g:fold_support " fold_support
    " Use F10 to toggle folding
    if &filetype ==# 'python'
        set foldmethod=indent
    else
        set foldmethod=syntax
    endif
    set nofoldenable " prevent closing all fold
    set foldlevel=10 " higher than 0 to avoid za/zc closing all fold
    "toggle fold
    inoremap <F10> <C-O>za
    nnoremap <F10> za
    onoremap <F10> <C-C>za
    vnoremap <F10> zf
endif

if exists('g:srcexpl_support') && g:srcexpl_support " SrcExpl
    nmap <F7> :SrcExplToggle<CR>
    " // In order to avoid conflicts, the Source Explorer should know what plugins except
    " // itself are using buffers. And you need add their buffer names into below list
    " // according to the command ":buffers!"
    let g:SrcExpl_pluginList = [
            \ "__Tag_List__",
            \ "_NERD_tree_",
            \ "Source_Explorer"
        \ ]
endif

if exists('g:ctrlp_support') && g:ctrlp_support " CtrlP (fuzzy finder)
    "To install CtrlP
    "  mkdir -p ~/.vim/pack/plugins/start
    "  git clone --depth=1 https://github.com/ctrlpvim/ctrlp.vim.git ~/.vim/pack/plugins/start/ctrlp
    "To install ag (the_silver_searcher, search file faster)
    "  pacman -S mingw-w64-{i686,x86_64}-ag (MSYS2)
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    "let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
    let g:ctrlp_use_caching = 0
    let g:ctrlp_max_files=0
    if executable('ag')
        " Use Ag over Grep
        set grepprg=ag\ --nogroup\ --nocolor

        if has('win32unix') || has('win32')
            if executable('sed')
                " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
                let g:ctrlp_user_command = 'ag %s -l --nocolor -g "" | sed "s/\r//g"'
            endif
        else
            " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
            let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
        endif
    endif

    set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.exe
    " 'link': 'some_bad_symbolic_links',
    let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ }
endif

" ===================== Plugin Config End =====================

function! Find_cscope_out_upward()
    " To generate cscope.out at first, cscope -Rbqk
    "let current_dir = getcwd()
    let full_file_path = expand("%:p:h")
    if filereadable(full_file_path)
        let file_dir = fnamemodify(full_file_path, ":h")
    else
        let file_dir = full_file_path " open dir with vim
    endif
    let s:cscope_out = findfile("cscope.out", file_dir . ";") " find cscope.out upward, static variable
    return s:cscope_out
endfunction

function! Update_cscope_out(option)
    let g:cscope_out = ''
    let cscope_out = Find_cscope_out_upward() " find cscope.out upward
    if !empty(cscope_out) && filereadable(cscope_out)
        if a:option == 'regenerate'
            let cscope_prefix = split(cscope_out, '.out')[0]
            let result = system("rm " . cscope_prefix . "*")
            echo "Regenerating cscope.out..."
        else
            echo "Updating cscope.out..."
        endif
        let src_root = fnamemodify(cscope_out, ":h")
        execute 'cd' fnameescape(src_root)
        if has('job')
            " close existing quickfix
            exe 'cclose'
            let g:job = job_start(["cscope", "-Rbqk"], {"exit_cb": "Update_cscope_out_handler"})
        else
            let result = system("cscope -Rbqk")
            call Add_cscope_out()
            exe 'echohl WarningMsg | echo "cscope update done" | echohl None'
        endif
        cd - " cd back to last directory
    endif
endfunction

function! Add_cscope_out()
    " find cscope.out upward
    if exists('g:cscope_out')
        let l:cscope_out = g:cscope_out
    endif
    let g:cscope_out = Find_cscope_out_upward()
    if exists('l:cscope_out') && g:cscope_out == l:cscope_out
        return
    endif
    silent exe "cs kill -1"
    if !empty(g:cscope_out) && filereadable(g:cscope_out)
        " kill current connection, used for :so ~/.vimrc
        silent exe "cs add" g:cscope_out
        set csre " make cscope aware of path of cscope.out instead of just search through relative path
    endif
    set cscopeverbose
endfunction

function! Update_cscope_out_handler(channel, msg)
    call Add_cscope_out()
    " exe 'echohl WarningMsg | echo "cscope update done" | echohl None'
    exe 'cexpr system("echo cscope update done") | copen 1 | call matchadd("Search", "cscope update done") | wincmd p'
endfunction

function! Tabline() abort
    " tabline setting
    let l:line = ''
    let l:current = tabpagenr()

    for l:i in range(1, tabpagenr('$'))
        " set to current or not
        if l:i == l:current
            let l:line .= '%#TabLineSel#'
        else
            let l:line .= '%#TabLine#'
        endif
        " get split number
        let l:line .= tabpagewinnr(l:i, '$')

        let l:label = fnamemodify(
            \ bufname(tabpagebuflist(l:i)[tabpagewinnr(l:i) - 1]),
            \ ':t'
        \ )

        let l:line .= '%' . i . 'T' " Starts mouse click target region.
        let l:line .= '  ' . l:label . '  '
    endfor

    let l:line .= '%#TabLineFill#'
    let l:line .= '%T' " Ends mouse click target region(s).

    return l:line
endfunction

" set tabline color
hi TabLine ctermfg=none ctermbg=none
hi TabLineFill ctermfg=none ctermbg=none
hi TabLineSel ctermfg=Black ctermbg=DarkGreen
" set tabline tab name be only filename instead of full path
set tabline=%!Tabline()

" To reload a file with different encoding:
"   :e ++enc=utf-8
let g:enc_index = 0
function! ChangeFileencoding()
  let encodings = ['utf-8', 'cp950', 'utf-16le']
  execute 'e ++enc='.encodings[g:enc_index].' %:p'
  if g:enc_index >=2
      let g:enc_index = 0
  else
      let g:enc_index = g:enc_index + 1
  endif
endf

function! CheckPlugin()
    let ret = system('mkdir -p ~/.vim/pack/plugins/start')
    let repo_params = [
      \ '--recursive',
      \ '',
      \ '',
      \ '',
      \ '--depth=1',
      \ '',
      \ '',
      \ '' ]
    let reops = [
      \ 'https://github.com/davidhalter/jedi-vim.git',
      \ 'https://github.com/vim-scripts/taglist.vim.git',
      \ 'https://github.com/preservim/nerdtree.git',
      \ 'https://github.com/AndrewRadev/linediff.vim.git',
      \ 'https://github.com/ctrlpvim/ctrlp.vim.git',
      \ 'https://github.com/ervandew/supertab.git',
      \ 'https://github.com/tomasiser/vim-code-dark.git',
      \ 'https://github.com/wenlongche/SrcExpl.git' ]
    let index = 0
    while index < len(reops)
        let name = split(reops[index], '\.git')[0]
        let name = split(name, '/')[4]
        if !isdirectory(fnamemodify('~', ':p') . '.vim/pack/plugins/start/' . name)
            echo 'git clone ' . repo_params[index] . ' ' . reops[index] . ' ~/.vim/pack/plugins/start/' . name
        endif
        let index += 1
    endwhile
endf
